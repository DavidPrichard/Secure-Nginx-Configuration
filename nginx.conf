
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Includes dynamic modules
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {

  # Basic Settings
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   15;
    send_timeout        20;
    default_type        application/octet-stream;
    include             mime.types;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	# Gzip Settings
    gzip 		         on;
    gzip_static      on;
    gzip_min_length  1100;
    gzip_proxied 	   any;
    gzip_types
      text/plain
      text/css
      text/xml
      image/svg+xml
      application/json
      application/javascript
      application/xml
      application/atom+xml
      application/rss+xml
      application/x-font-opentype
      application/x-font-ttf;

  # Error Pages
    error_page 404             /404.html;
    error_page 500 502 503 504 /50x.html;

  # SSL Configuration
    ssl_certificate		   "/path/to/server.crt";
    ssl_certificate_key	 "/path/to/private/server.key";
    ssl_dhparam          "/path/to/private/dhparam.pem";
    ssl_session_cache	   shared:SSL:10m;
    ssl_session_timeout	 10m;
    ssl_session_tickets	 off;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

  # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /path/to/ssl.crt;
    resolver 8.8.8.8 8.8.4.4 valid=600s;
    resolver_timeout 10s;

    server {
      listen       [::]:80 default_server;
      server_name  example.org;
      root         /usr/share/html;
      return 301 https://$host$request_uri;

      location / {
        try_files $uri $uri.html $uri/ =404;
      }
    }

    server {
      listen       [::]:443 ssl http2 default_server;
      server_name  example.org;
      root         /usr/share/html;

      add_header X-Content-Type-Options nosniff always;
      # The HSTS header is dangerous; don't use it without testing.
      # add_header Strict-Transport-Security "max-age=8640; includeSubDomains" always;

      limit_except GET HEAD POST {
        deny all;
      }

      location / {
        add_header Content-Security-Policy "default-src 'self'; object-src 'none';" always;
        try_files $uri $uri.html $uri/ =404;
 	    }

    }

}
